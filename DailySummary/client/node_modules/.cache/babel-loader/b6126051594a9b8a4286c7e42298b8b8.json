{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/auto-complete/style\";\nimport _AutoComplete from \"antd/es/auto-complete\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nvar _jsxFileName = \"E:\\\\mongmong\\\\DailySummary\\\\client\\\\src\\\\components\\\\Settings.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nconst Option = _Select.Option;\nconst AutoCompleteOption = _AutoComplete.Option;\n\nconst config = require('../config');\n\nclass Settings extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  resetBtnClicked() {\n    axios.post(config.serverUrl + '/api/password_reset', {\n      params: {\n        user_password: this.state.password\n      }\n    }, {\n      headers: {\n        token: localStorage.token\n      }\n    }).then(res => {\n      console.log(res.result);\n      this.props.history.push(\"/posts\");\n    }).catch(error => {\n      if (error.response) {\n        alert(error.response.status + \": \" + error.response.data.message);\n      } else {\n        alert(error);\n      }\n    });\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const autoCompleteResult = this.state.autoCompleteResult;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return React.createElement(_Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      className: \"one-settings flex flex-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(_Form.Item, {\n      label: \"Password\",\n      className: \"one-input-pw\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(_Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"Confirm Password\",\n      className: \"one-input-confirm-pw\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(_Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, Object.assign({}, tailFormItemLayout, {\n      className: \"btn-wrap flex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"btn btn-submit\",\n      onClick: \"this.resetBtnClicked\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"\\uBCC0\\uACBD\"), React.createElement(_Button, {\n      className: \"btn btn-unsubscribe\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/unsubscribe\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"\\uD68C\\uC6D0 \\uD0C8\\uD1F4\"))));\n  }\n\n}\n\nconst WrappedSettingsForm = _Form.create({\n  name: 'register'\n})(Settings);\n\nexport default WrappedSettingsForm;","map":{"version":3,"sources":["E:/mongmong/DailySummary/client/src/components/Settings.js"],"names":["React","Component","Link","axios","Option","AutoCompleteOption","config","require","Settings","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","resetBtnClicked","post","serverUrl","params","user_password","password","headers","token","localStorage","then","res","result","history","push","catch","error","response","alert","status","data","message","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","validator","WrappedSettingsForm","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Form, Input, Select, Button, AutoComplete } from 'antd';\r\nimport axios from 'axios';\r\n\r\nconst { Option } = Select;\r\nconst AutoCompleteOption = AutoComplete.Option;\r\nconst config = require('../config');\r\n\r\nclass Settings extends Component {\r\n  state = {\r\n    confirmDirty: false,\r\n    autoCompleteResult: [],\r\n  };\r\n\r\n  resetBtnClicked () {\r\n    axios.post(config.serverUrl + '/api/password_reset', \r\n    {\r\n      params: {user_password: this.state.password},\r\n    },\r\n    {\r\n      headers: {token: localStorage.token},\r\n    }).then(res => {      \r\n      console.log(res.result)\r\n      this.props.history.push(\"/posts\");\r\n    }).catch((error) => {\r\n      if (error.response) {\r\n        alert(error.response.status + \": \" + \r\n              error.response.data.message);\r\n      } else {\r\n        alert(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n      }\r\n    });\r\n  };\r\n\r\n  handleConfirmBlur = e => {\r\n    const { value } = e.target;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  };\r\n\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields(['confirm'], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  handleWebsiteChange = value => {\r\n    let autoCompleteResult;\r\n    if (!value) {\r\n      autoCompleteResult = [];\r\n    } else {\r\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n    }\r\n    this.setState({ autoCompleteResult });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const { autoCompleteResult } = this.state;\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8,\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"one-settings flex flex-center\">\r\n        <Form.Item label=\"Password\" className=\"one-input-pw\" hasFeedback>\r\n          {getFieldDecorator('password', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please input your password!',\r\n              },\r\n              {\r\n                validator: this.validateToNextPassword,\r\n              },\r\n            ],\r\n          })(<Input.Password />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Confirm Password\" className=\"one-input-confirm-pw\" hasFeedback>\r\n          {getFieldDecorator('confirm', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please confirm your password!',\r\n              },\r\n              {\r\n                validator: this.compareToFirstPassword,\r\n              },\r\n            ],\r\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout} className=\"btn-wrap flex\">\r\n          <Button type=\"primary\" htmlType=\"submit\" className=\"btn btn-submit\" onClick=\"this.resetBtnClicked\">\r\n            변경\r\n          </Button>\r\n          <Button className=\"btn btn-unsubscribe\">\r\n            <Link to=\"/unsubscribe\">\r\n              회원 탈퇴\r\n            </Link>       \r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedSettingsForm = Form.create({ name: 'register' })(Settings);\r\n\r\nexport default WrappedSettingsForm;"]},"metadata":{},"sourceType":"module"}