{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/auto-complete/style\";\nimport _AutoComplete from \"antd/es/auto-complete\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nvar _jsxFileName = \"E:\\\\mongmong\\\\DailySummary\\\\client\\\\src\\\\components\\\\Login\\\\SignUp.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport axios from 'axios';\nconst Option = _Select.Option;\nconst AutoCompleteOption = _AutoComplete.Option;\n\nconst config = require('../../config');\n\nclass SignUpForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      console.log(e.target);\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n\n        axios.post(config.serverUrl + '/api/register', {\n          user_email: values.email,\n          user_password: values.password\n        }).then(response => {\n          alert(`${response.user_email} 님의 회원가입이 완료되었습니다.`);\n          this.props.history.push('/login');\n        }).catch(error => {// alert(error.response.status + \": \" + \n          //       error.response.data.message);\n        });\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  // handleWebsiteChange = value => {\n  //   let autoCompleteResult;\n  //   if (!value) {\n  //     autoCompleteResult = [];\n  //   } else {\n  //     autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n  //   }\n  //   this.setState({ autoCompleteResult });\n  // };\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const autoCompleteResult = this.state.autoCompleteResult;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return React.createElement(_Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      className: \"one-signup flex flex-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(_Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: '잘못된 형식의 이메일입니다.'\n      }, {\n        required: true,\n        message: '이메일을 입력해주세요.'\n      }]\n    })(React.createElement(_Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 입력해주세요.'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(_Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: '비밀번호가 다릅니다. 다시 확인해주세요.'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(_Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, Object.assign({}, tailFormItemLayout, {\n      className: \"one-checkbox-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), getFieldDecorator('agreement', {\n      rules: [{\n        required: true,\n        message: '개인정보 제공에 동의해주세요.'\n      }, {\n        validator: this.validateToNextPassword\n      }],\n      valuePropName: 'checked'\n    })(React.createElement(_Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"\\uAC1C\\uC778\\uC815\\uBCF4 \\uC81C\\uACF5\\uC5D0 \\uB3D9\\uC758\\uD569\\uB2C8\\uB2E4.\"))), React.createElement(_Form.Item, Object.assign({}, tailFormItemLayout, {\n      className: \"btn-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"btn btn-signup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"\\uAC00\\uC785\"), React.createElement(\"div\", {\n      className: \"shortcut flex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"\\uB85C\\uADF8\\uC778\"))));\n  }\n\n}\n\nconst WrappedSignUpForm = _Form.create({\n  name: 'register'\n})(SignUpForm);\n\nexport default withRouter(WrappedSignUpForm);","map":{"version":3,"sources":["E:/mongmong/DailySummary/client/src/components/Login/SignUp.js"],"names":["React","Component","Link","withRouter","axios","Option","AutoCompleteOption","config","require","SignUpForm","state","confirmDirty","autoCompleteResult","handleSubmit","e","console","log","target","preventDefault","props","form","validateFieldsAndScroll","err","values","post","serverUrl","user_email","email","user_password","password","then","response","alert","history","push","catch","error","handleConfirmBlur","value","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","type","message","required","validator","valuePropName","WrappedSignUpForm","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport { Form, Input, Select, Checkbox, Button, AutoComplete } from 'antd';\r\nimport axios from 'axios';\r\n\r\nconst { Option } = Select;\r\nconst AutoCompleteOption = AutoComplete.Option;\r\nconst config = require('../../config');\r\n\r\nclass SignUpForm extends Component {\r\n  state = {\r\n    confirmDirty: false,\r\n    autoCompleteResult: [],\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    console.log(e.target);\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n      }\r\n      \r\n      axios.post(config.serverUrl + '/api/register', {\r\n        user_email: values.email,\r\n        user_password: values.password,\r\n      })\r\n      .then((response) => {\r\n        alert(`${response.user_email} 님의 회원가입이 완료되었습니다.`);\r\n        this.props.history.push('/login');\r\n      })\r\n      .catch((error) => {\r\n        // alert(error.response.status + \": \" + \r\n        //       error.response.data.message);\r\n      });        \r\n    });\r\n  };\r\n\r\n  handleConfirmBlur = e => {\r\n    const { value } = e.target;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  };\r\n\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields(['confirm'], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  // handleWebsiteChange = value => {\r\n  //   let autoCompleteResult;\r\n  //   if (!value) {\r\n  //     autoCompleteResult = [];\r\n  //   } else {\r\n  //     autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n  //   }\r\n  //   this.setState({ autoCompleteResult });\r\n  // };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const { autoCompleteResult } = this.state;\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8,\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"one-signup flex flex-center\">\r\n        <Form.Item label=\"E-mail\">\r\n          {getFieldDecorator('email', {\r\n            rules: [\r\n              {\r\n                type: 'email',\r\n                message: '잘못된 형식의 이메일입니다.',\r\n              },\r\n              {\r\n                required: true,\r\n                message: '이메일을 입력해주세요.',\r\n              },\r\n            ],\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Password\" hasFeedback>\r\n          {getFieldDecorator('password', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: '비밀번호를 입력해주세요.',\r\n              },\r\n              {\r\n                validator: this.validateToNextPassword,\r\n              },\r\n            ],\r\n          })(<Input.Password />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Confirm Password\" hasFeedback>\r\n          {getFieldDecorator('confirm', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: '비밀번호가 다릅니다. 다시 확인해주세요.',\r\n              },\r\n              {\r\n                validator: this.compareToFirstPassword,\r\n              },\r\n            ],\r\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout} className=\"one-checkbox-wrap\">\r\n          {getFieldDecorator('agreement', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: '개인정보 제공에 동의해주세요.',\r\n              },\r\n              {\r\n                validator: this.validateToNextPassword,\r\n              },\r\n            ],\r\n            valuePropName: 'checked',\r\n          })(\r\n            <Checkbox>\r\n              개인정보 제공에 동의합니다.\r\n            </Checkbox>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout} className=\"btn-wrap\">\r\n          <Button type=\"primary\" htmlType=\"submit\" className=\"btn btn-signup\">\r\n            가입\r\n          </Button>\r\n          <div className=\"shortcut flex\">\r\n                <Link to=\"/login\">로그인</Link>\r\n          </div>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedSignUpForm = Form.create({ name: 'register' })(SignUpForm);\r\n\r\nexport default withRouter(WrappedSignUpForm);"]},"metadata":{},"sourceType":"module"}