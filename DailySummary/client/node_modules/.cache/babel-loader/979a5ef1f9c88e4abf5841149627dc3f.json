{"ast":null,"code":"import \"antd/es/spin/style\";\nimport _Spin from \"antd/es/spin\";\nimport \"antd/es/list/style\";\nimport _List from \"antd/es/list\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nvar _jsxFileName = \"E:\\\\mongmong\\\\DailySummary\\\\client\\\\src\\\\components\\\\Post\\\\PostList\\\\PostList.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nconst config = require('../../../config');\n\nclass PostsList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchData = () => {\n      const year = this.props.match.params.year;\n      const month = this.props.match.params.month; //const day = this.props.match.params.day;\n\n      let url = config.serverUrl + '/api/posts/';\n      url += year !== '' ? year + '/' : '';\n      url += month !== '' ? month + '/' : ''; //url += day == '' ? day + '/' : '';\n\n      console.log(url);\n      axios.post(config.serverUrl + \"/api/post_list\", {\n        headers: {\n          token: localStorage.token\n        }\n      }).then(response => {\n        console.log(response.data);\n        this.setState({\n          data: response.data\n        });\n      });\n    };\n\n    this.handleInfiniteOnLoad = () => {\n      let data = this.state.data;\n      this.setState({\n        loading: true\n      });\n\n      if (data.length > 14) {\n        _message.warning('Infinite List loaded all');\n\n        this.setState({\n          hasMore: false,\n          loading: false\n        });\n        return;\n      }\n\n      this.fetchData(res => {\n        data = data.concat(res);\n        this.setState({\n          data,\n          loading: false\n        });\n      });\n    };\n\n    this.renderItem = item => {\n      return React.createElement(_List.Item, {\n        key: item.userEmail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(_List.Item.Meta, {\n        title: React.createElement(\"a\", {\n          href: \"/post/\" + item.postId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, item.createdDt),\n        className: \"list-item-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, item.paragraph));\n    };\n\n    this.state = {\n      data: [],\n      loading: false,\n      hasMore: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData(res => {\n      this.setState({\n        data: res\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"demo-infinite-container one-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(InfiniteScroll, {\n      initialLoad: false,\n      pageStart: 0,\n      loadMore: this.handleInfiniteOnLoad,\n      hasMore: !this.state.loading && this.state.hasMore,\n      useWindow: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(_List, {\n      dataSource: this.state.data,\n      renderItem: this.renderItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.loading && this.state.hasMore && React.createElement(\"div\", {\n      className: \"demo-loading-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(_Spin, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default PostsList;","map":{"version":3,"sources":["E:/mongmong/DailySummary/client/src/components/Post/PostList/PostList.js"],"names":["React","Component","axios","InfiniteScroll","config","require","PostsList","constructor","props","fetchData","year","match","params","month","url","serverUrl","console","log","post","headers","token","localStorage","then","response","data","setState","handleInfiniteOnLoad","state","loading","length","warning","hasMore","res","concat","renderItem","item","userEmail","postId","createdDt","paragraph","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { List, message, Spin } from 'antd';\r\nimport axios from 'axios';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\n\r\nconst config = require('../../../config');\r\n\r\nclass PostsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      loading: false,\r\n      hasMore: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData(res => {\r\n      this.setState({\r\n        data: res,\r\n      });\r\n    });\r\n  }\r\n\r\n  fetchData = () => {\r\n    const year = this.props.match.params.year;\r\n    const month = this.props.match.params.month;\r\n    //const day = this.props.match.params.day;\r\n    let url = config.serverUrl +'/api/posts/';\r\n    url += year !== '' ? year + '/' : '';\r\n    url += month !== '' ? month + '/' : '';\r\n    //url += day == '' ? day + '/' : '';\r\n    \r\n    console.log(url);\r\n\r\n     axios.post(config.serverUrl + \"/api/post_list\", {\r\n      headers: { token: localStorage.token },\r\n    })    \r\n    .then((response) => {\r\n      console.log(response.data);\r\n      this.setState({\r\n        data: response.data,\r\n      });\r\n    })\r\n  };\r\n\r\n  handleInfiniteOnLoad = () => {\r\n    let { data } = this.state;\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    if (data.length > 14) {\r\n      message.warning('Infinite List loaded all');\r\n      this.setState({\r\n        hasMore: false,\r\n        loading: false,\r\n      });\r\n      return;\r\n    }\r\n    this.fetchData(res => {\r\n      data = data.concat(res);\r\n      this.setState({\r\n        data,\r\n        loading: false,\r\n      });\r\n    });\r\n  };\r\n  \r\n  renderItem = (item) => {\r\n    return (\r\n      <List.Item key={item.userEmail}>\r\n        <List.Item.Meta title={<a href={\"/post/\"+item.postId}>{item.createdDt}</a>} className=\"list-item-wrap\" />\r\n        <div>{item.paragraph}</div>\r\n      </List.Item>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"demo-infinite-container one-list\">\r\n        <InfiniteScroll initialLoad={false} pageStart={0} loadMore={this.handleInfiniteOnLoad} hasMore={!this.state.loading && this.state.hasMore} useWindow={false} >\r\n          <List dataSource={this.state.data} renderItem={this.renderItem} >\r\n            {this.state.loading && this.state.hasMore && (\r\n              <div className=\"demo-loading-container\">\r\n                <Spin />\r\n              </div>\r\n              )}\r\n          </List>\r\n        </InfiniteScroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostsList;"]},"metadata":{},"sourceType":"module"}